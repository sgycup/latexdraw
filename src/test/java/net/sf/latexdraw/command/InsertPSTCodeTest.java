package net.sf.latexdraw.command;

import io.github.interacto.jfx.test.UndoableCmdTest;
import java.util.ResourceBundle;
import java.util.stream.Stream;
import javafx.scene.control.Label;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Drawing;
import net.sf.latexdraw.model.api.shape.Group;
import net.sf.latexdraw.model.api.shape.Rectangle;
import net.sf.latexdraw.service.PreferencesService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.testfx.framework.junit5.ApplicationExtension;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command InsertPSTCode. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
@ExtendWith(ApplicationExtension.class)
class InsertPSTCodeTest extends UndoableCmdTest<InsertPSTCode> {
	String code;
	Label statusBar;
	ResourceBundle lang;
	Drawing drawing;

	@BeforeEach
	void setUp() {
		bundle = new PreferencesService().getBundle();
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			code = "\\psframe(-1,-2)(-3,-4)";
			cmd = new InsertPSTCode(code, statusBar, drawing, lang);
		}, () -> {
			code = "\\psframe(1,2)(3,4)\\psframe(5,6)(3,4)";
			cmd = new InsertPSTCode(code, statusBar, drawing, lang);
		}, () -> {
			code = "%foobar";
			cmd = new InsertPSTCode(code, statusBar, drawing, lang);
		});
	}

	@Override
	protected void commonCanDoFixture() {
		drawing = ShapeFactory.INST.createDrawing();
		lang = new PreferencesService().getBundle();
		statusBar = new Label();
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(cmd.hadEffect()).isTrue();
			assertThat(drawing.isModified()).isTrue();
			assertThat(drawing.size()).isEqualTo(1);
			assertThat(drawing.getShapeAt(0).orElseThrow()).isInstanceOf(Rectangle.class);
		}, () -> {
			assertThat(cmd.hadEffect()).isTrue();
			assertThat(drawing.isModified()).isTrue();
			assertThat(drawing.size()).isEqualTo(1);
			assertThat(drawing.getShapeAt(0).orElseThrow()).isInstanceOf(Group.class);
			assertThat(((Group) drawing.getShapeAt(0).orElseThrow()).size()).isEqualTo(2);
		}, () -> {
			assertThat(cmd.hadEffect()).isFalse();
			assertThat(drawing.isModified()).isFalse();
			assertThat(drawing.size()).isEqualTo(0);
		});
	}

	@Override
	protected Stream<Runnable> undoCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.isModified()).isFalse();
			assertThat(drawing.isEmpty()).isTrue();
		});
	}
}
