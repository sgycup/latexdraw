package net.sf.latexdraw.command.shape;

import io.github.interacto.jfx.test.UndoableCmdTest;
import java.util.stream.Stream;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Drawing;
import net.sf.latexdraw.model.api.shape.Group;
import net.sf.latexdraw.service.PreferencesService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command TranslateShapes. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
class TranslateShapesTest extends UndoableCmdTest<TranslateShapes> {
	Drawing drawing;
	Group shape;

	@BeforeEach
	void setUp() {
		bundle = new PreferencesService().getBundle();
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(
			() -> cmd.setT(10, -20),
			() -> cmd.setT(0, 30));
	}

	@Override
	protected void commonCanDoFixture() {
		drawing = ShapeFactory.INST.createDrawing();
		shape = ShapeFactory.INST.createGroup(
			ShapeFactory.INST.createRectangle(ShapeFactory.INST.createPoint(30, 50), 40, 70));
		cmd = new TranslateShapes(drawing, shape);
	}

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(
			() -> cmd = new TranslateShapes(ShapeFactory.INST.createDrawing(), ShapeFactory.INST.createGroup()),
			() -> {
				cmd = new TranslateShapes(ShapeFactory.INST.createDrawing(), ShapeFactory.INST.createGroup(ShapeFactory.INST.createCircle()));
				cmd.setT(Double.NaN, 10);
			},
			() -> cmd = new TranslateShapes(ShapeFactory.INST.createDrawing(), ShapeFactory.INST.createGroup(ShapeFactory.INST.createCircle()))
		);
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(shape.getTopLeftPoint()).isEqualTo(ShapeFactory.INST.createPoint(40, 30));
			assertThat(shape.getBottomRightPoint()).isEqualTo(ShapeFactory.INST.createPoint(80, 100));
		}, () -> {
			assertThat(shape.getTopLeftPoint()).isEqualTo(ShapeFactory.INST.createPoint(30, 80));
			assertThat(shape.getBottomRightPoint()).isEqualTo(ShapeFactory.INST.createPoint(70, 150));
		});
	}

	@Override
	protected void commonDoCheckers() {
		assertThat(drawing.isModified()).isTrue();
		assertThat(cmd.hadEffect()).isTrue();
	}

	@Override
	protected Stream<Runnable> undoCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.isModified()).isFalse();
			assertThat(shape.getTopLeftPoint()).isEqualTo(ShapeFactory.INST.createPoint(30, 50));
			assertThat(shape.getBottomRightPoint()).isEqualTo(ShapeFactory.INST.createPoint(70, 120));
		});
	}

	@Test
	void testTwoTimesNothing() {
		commonCanDoFixture();
		cmd.setT(10, -20);
		cmd.doIt();
		cmd.setT(-10, 20);
		cmd.doIt();
		cmd.done();
		assertThat(cmd.hadEffect()).isFalse();
	}
}
