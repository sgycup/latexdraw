package net.sf.latexdraw.command.shape;

import io.github.interacto.jfx.test.UndoableCmdTest;
import java.io.File;
import java.util.stream.Stream;
import javafx.stage.FileChooser;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Drawing;
import net.sf.latexdraw.model.api.shape.Picture;
import net.sf.latexdraw.service.PreferencesService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command InsertPicture. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
class InsertPictureTest extends UndoableCmdTest<InsertPicture> {
	FileChooser fileChooser;
	Drawing drawing;
	Picture shape;
	File file;

	@BeforeEach
	void setUp() {
		bundle = new PreferencesService().getBundle();
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			Mockito.when(fileChooser.showOpenDialog(null)).thenReturn(file);
			Mockito.when(file.canRead()).thenReturn(true);
		}, () -> {
			Mockito.when(fileChooser.showOpenDialog(null)).thenReturn(file);
			Mockito.when(file.canRead()).thenReturn(false);
		}, () -> { });
	}

	@Override
	protected void commonCanDoFixture() {
		fileChooser = Mockito.mock(FileChooser.class);
		drawing = ShapeFactory.INST.createDrawing();
		shape = Mockito.mock(Picture.class);
		file = Mockito.mock(File.class);
		cmd = new InsertPicture(shape, drawing, fileChooser);
	}

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(() -> {
			cmd = new InsertPicture(Mockito.mock(Picture.class), ShapeFactory.INST.createDrawing(), Mockito.mock(FileChooser.class));
			cmd.setShape(ShapeFactory.INST.createRectangle());
		});
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.contains(shape)).isTrue();
			assertThat(drawing.isModified()).isTrue();
			assertThat(cmd.hadEffect()).isTrue();
		}, () -> {
			assertThat(drawing.contains(shape)).isFalse();
			assertThat(drawing.isModified()).isFalse();
			assertThat(cmd.hadEffect()).isFalse();
		}, () -> {
			assertThat(drawing.contains(shape)).isFalse();
			assertThat(drawing.isModified()).isFalse();
			assertThat(cmd.hadEffect()).isFalse();
		});
	}

	@Override
	protected Stream<Runnable> undoCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.contains(shape)).isFalse();
			assertThat(drawing.isModified()).isFalse();
		});
	}
}
