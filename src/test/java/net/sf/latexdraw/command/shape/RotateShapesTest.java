package net.sf.latexdraw.command.shape;

import io.github.interacto.jfx.test.UndoableCmdTest;
import java.util.stream.Stream;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Point;
import net.sf.latexdraw.model.api.shape.Shape;
import net.sf.latexdraw.service.PreferencesService;
import org.assertj.core.data.Offset;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command RotateShapes. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
class RotateShapesTest extends UndoableCmdTest<RotateShapes> {
	double rotationAngle;
	Point gc;
	Shape shape;

	@BeforeEach
	void setUp() {
		bundle = new PreferencesService().getBundle();
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			shape = ShapeFactory.INST.createRectangle(ShapeFactory.INST.createPoint(100, 200), 50, 300);
			gc = shape.getGravityCentre();
			rotationAngle = Math.PI;
			cmd = new RotateShapes(gc, shape, rotationAngle);
		});
	}

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(
			() -> cmd = new RotateShapes(ShapeFactory.INST.createPoint(0, 0), ShapeFactory.INST.createRectangle(), Double.NaN),
			() -> cmd = new RotateShapes(ShapeFactory.INST.createPoint(Double.NaN, 0), ShapeFactory.INST.createRectangle(), 12));
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(shape.getRotationAngle()).isEqualTo(rotationAngle, Offset.offset(0.0001));
			assertThat(shape.isModified()).isTrue();
		});
	}

	@Override
	protected Stream<Runnable> undoCheckers() {
		return Stream.of(() -> {
			assertThat(shape.getRotationAngle()).isEqualTo(0d, Offset.offset(0.0001));
			assertThat(shape.isModified()).isFalse();
		});
	}

	@ParameterizedTest
	@MethodSource({"canDoFixtures"})
	void testGetGc(final Runnable config) {
		config.run();
		assertThat(cmd.getGc()).isSameAs(gc);
	}

	@ParameterizedTest
	@MethodSource({"doProvider"})
	void testDoTwoTimes(final Runnable config, final Runnable oracle) {
		config.run();
		cmd.doIt();
		rotationAngle = Math.PI / 3d;
		cmd.setRotationAngle(rotationAngle);
		cmd.doIt();
		cmd.done();
		oracle.run();
	}
}
