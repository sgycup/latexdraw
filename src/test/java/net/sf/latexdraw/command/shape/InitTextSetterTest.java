package net.sf.latexdraw.command.shape;

import io.github.interacto.instrument.Instrument;
import io.github.interacto.jfx.test.CommandTest;
import java.util.stream.Stream;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.instrument.TextSetter;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Plot;
import net.sf.latexdraw.model.api.shape.Point;
import net.sf.latexdraw.model.api.shape.Text;
import net.sf.latexdraw.ui.TextAreaAutoSize;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.testfx.framework.junit5.ApplicationExtension;

/**
 * Test class for the command InitTextSetter. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
@ExtendWith(ApplicationExtension.class)
class InitTextSetterTest extends CommandTest<InitTextSetter> {
	TextSetter setter;
	String text;
	Point position;
	Text textShape;
	Plot plotShape;
	Instrument<?> instrument;
	TextAreaAutoSize field;

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			text = "foo";
			plotShape = Mockito.mock(Plot.class);
			cmd = new InitTextSetter(instrument, setter, text, position, null, plotShape);
		}, () -> {
			textShape = Mockito.mock(Text.class);
			plotShape = Mockito.mock(Plot.class);
			cmd = new InitTextSetter(instrument, setter, null, position, textShape, plotShape);
		}, () -> {
			text = "bar";
			textShape = Mockito.mock(Text.class);
			cmd = new InitTextSetter(instrument, setter, text, position, textShape, null);
		});
	}

	@Override
	protected void commonCanDoFixture() {
		instrument = Mockito.mock(Instrument.class);
		setter = Mockito.mock(TextSetter.class);
		position = ShapeFactory.INST.createPoint(10, 20);
		field = Mockito.mock(TextAreaAutoSize.class);
		Mockito.when(setter.getTextField()).thenReturn(field);
	}

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(() -> cmd = new InitTextSetter(Mockito.mock(Instrument.class), Mockito.mock(TextSetter.class), null,
				Mockito.mock(Point.class), null, null),
			() -> cmd = new InitTextSetter(Mockito.mock(Instrument.class), Mockito.mock(TextSetter.class), "",
				ShapeFactory.INST.createPoint(Double.NaN, 0), null, Mockito.mock(Plot.class)));
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			Mockito.verify(instrument).setActivated(true);
			Mockito.verify(field).setText(text);
			Mockito.verify(setter).setPosition(position);
			Mockito.verify(setter).setPlot(plotShape);
			Mockito.verify(setter).setText(textShape);
		});
	}

	@AfterEach
	void tearDownInitTextSetterTest() {
		this.setter = null;
		this.text = null;
		this.position = null;
		this.textShape = null;
		this.plotShape = null;
		this.instrument = null;
	}
}
