package net.sf.latexdraw.command.shape;

import io.github.interacto.jfx.test.CommandTest;
import java.util.stream.Stream;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Drawing;
import net.sf.latexdraw.model.api.shape.Shape;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.Mockito;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command CopyShapes. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
class CopyShapesTest extends CommandTest<CopyShapes> {
	Shape shape;

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(
			() -> {
				final var drawing = Mockito.mock(Drawing.class);
				Mockito.when(drawing.getSelection()).thenReturn(ShapeFactory.INST.createGroup());
				cmd = new CopyShapes(new SelectShapes(drawing));
			});
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			final var selectShapes = new SelectShapes(Mockito.mock(Drawing.class));
			shape = ShapeFactory.INST.createRectangle();
			selectShapes.setShape(shape);
			cmd = new CopyShapes(selectShapes);
		});
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(cmd.copiedShapes).isNotNull();
			assertThat(cmd.copiedShapes).hasSize(1);
			assertThat(shape).isNotSameAs(cmd.copiedShapes.get(0));
		});
	}


	@ParameterizedTest
	@MethodSource({"canDoFixtures"})
	public void testUnregistered(final Runnable doConfig) {
		doConfig.run();
		assertThat(cmd.unregisteredBy(new CopyShapes(new SelectShapes(Mockito.mock(Drawing.class))))).isTrue();
	}

	@ParameterizedTest
	@MethodSource({"canDoFixtures"})
	public void testUnregisteredKO(final Runnable doConfig) {
		doConfig.run();
		assertThat(cmd.unregisteredBy(null)).isFalse();
	}
}
