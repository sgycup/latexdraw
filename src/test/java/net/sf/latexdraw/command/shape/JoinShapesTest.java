package net.sf.latexdraw.command.shape;

import io.github.interacto.jfx.test.UndoableCmdTest;
import java.util.List;
import java.util.stream.Stream;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.model.ShapeFactory;
import net.sf.latexdraw.model.api.shape.Drawing;
import net.sf.latexdraw.model.api.shape.Group;
import net.sf.latexdraw.model.api.shape.Shape;
import net.sf.latexdraw.service.PreferencesService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Test class for the command JoinShapes. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
class JoinShapesTest extends UndoableCmdTest<JoinShapes> {
	List<Shape> shapes;
	Drawing drawing;
	Shape s0;
	Shape s1;
	Shape s2;
	Shape s3;
	Shape s4;

	@BeforeEach
	void setUp() {
		bundle = new PreferencesService().getBundle();
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			drawing = ShapeFactory.INST.createDrawing();
			s0 = ShapeFactory.INST.createRectangle();
			s1 = ShapeFactory.INST.createCircle();
			s2 = ShapeFactory.INST.createRhombus();
			s3 = ShapeFactory.INST.createEllipse();
			s4 = ShapeFactory.INST.createText();
			drawing.addShape(s0);
			drawing.addShape(s1);
			drawing.addShape(s2);
			drawing.addShape(s3);
			drawing.addShape(s4);
			shapes = List.of(s2, s4, s0);

			cmd = new JoinShapes(drawing, shapes);
		});
	}

	@Override
	protected Stream<Runnable> cannotDoFixtures() {
		return Stream.of(() -> cmd = new JoinShapes(ShapeFactory.INST.createDrawing(), List.of()));
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.getShapes()).hasSize(3);
			assertThat(drawing.getShapes().get(0)).isEqualTo(s1);
			assertThat(drawing.getShapes().get(1)).isEqualTo(s3);
			assertThat(drawing.getShapes().get(2)).isInstanceOf(Group.class);
			final Group group = (Group) drawing.getShapes().get(2);
			assertThat(group.getShapeAt(0).orElseThrow()).isEqualTo(s0);
			assertThat(group.getShapeAt(1).orElseThrow()).isEqualTo(s2);
			assertThat(group.getShapeAt(2).orElseThrow()).isEqualTo(s4);
			assertThat(drawing.isModified()).isTrue();
		});
	}

	@Override
	protected Stream<Runnable> undoCheckers() {
		return Stream.of(() -> {
			assertThat(drawing.getShapes().get(0)).isEqualTo(s0);
			assertThat(drawing.getShapes().get(1)).isEqualTo(s1);
			assertThat(drawing.getShapes().get(2)).isEqualTo(s2);
			assertThat(drawing.getShapes().get(3)).isEqualTo(s3);
			assertThat(drawing.getShapes().get(4)).isEqualTo(s4);
			assertThat(drawing.isModified()).isFalse();
		});
	}
}
