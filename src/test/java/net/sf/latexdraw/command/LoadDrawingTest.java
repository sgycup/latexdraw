package net.sf.latexdraw.command;

import io.github.interacto.jfx.test.CommandTest;
import io.github.interacto.jfx.ui.JfxUI;
import io.github.interacto.jfx.ui.OpenSaver;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;
import javafx.concurrent.Task;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.util.SystemUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.testfx.framework.junit5.ApplicationExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

/**
 * Test class for the command LoadDrawing. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
@ExtendWith(ApplicationExtension.class)
class LoadDrawingTest extends CommandTest<LoadDrawing> {
	FileChooser fileChooser;
	Optional<File> currentFolder;
	Stage mainstage;
	File file;
	OpenSaver<Label> openSaveManager;
	ProgressBar progressBar;
	Label statusWidget;
	JfxUI ui;
	Alert modifiedAlert;
	String selectedFileName;
	Task<Boolean> task;
	SystemUtils formerUtils;

	@BeforeEach
	void setUp() {
		formerUtils = SystemUtils.getInstance();
	}

	@AfterEach
	void tearDown() {
		SystemUtils.setSingleton(formerUtils);
	}

	@Override
	protected void commonCanDoFixture() {
		final SystemUtils utils = Mockito.mock(SystemUtils.class);
		Mockito.when(utils.getPathTemplatesDirUser()).thenReturn("");
		SystemUtils.setSingleton(utils);
		ui = Mockito.mock(JfxUI.class);
		statusWidget = Mockito.mock(Label.class);
		progressBar = Mockito.mock(ProgressBar.class);
		mainstage = Mockito.mock(Stage.class);
		file = Mockito.mock(File.class);
		modifiedAlert = Mockito.mock(Alert.class);
		openSaveManager = Mockito.mock(OpenSaver.class);
		fileChooser = Mockito.mock(FileChooser.class);
		currentFolder = Optional.empty();

		cmd = new LoadDrawing(file, openSaveManager, progressBar, statusWidget, ui, fileChooser, currentFolder, mainstage, modifiedAlert);
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			// file cannot read, not modified ui
			Mockito.when(ui.isModified()).thenReturn(false);
		}, () -> {
			// file null, not modified ui
			Mockito.when(ui.isModified()).thenReturn(false);
			cmd = new LoadDrawing(null, openSaveManager, progressBar, statusWidget, ui, fileChooser, currentFolder, mainstage, modifiedAlert);
		}, () -> {
			// file null, not modified ui, current folder not null
			Mockito.when(ui.isModified()).thenReturn(false);
			currentFolder = Optional.of(new File("foo"));
			cmd = new LoadDrawing(null, openSaveManager, progressBar, statusWidget, ui, fileChooser, currentFolder, mainstage, modifiedAlert);
		}, () -> {
			// file can read, not modified ui
			configureLoadFile();
			Mockito.when(ui.isModified()).thenReturn(false);
		}, () -> {
			// ui modified, cancel load
			Mockito.when(ui.isModified()).thenReturn(true);
		}, () -> {
			// ui modified, alert NO
			configureLoadFile();
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.NO));
		}, () -> {
			// ui modified, alert YES, no file selected
			configureLoadFile();
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
		}, () -> {
			// ui modified, alert YES, no file selected
			configureLoadFile();
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			try {
				Mockito.when(task.get()).thenReturn(false);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
		}, () -> {
			// ui modified, alert YES, file null
			configureLoadFile();
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			Mockito.when(fileChooser.showOpenDialog(Mockito.any())).thenReturn(file);
			cmd = new LoadDrawing(null, openSaveManager, progressBar, statusWidget, ui, fileChooser, Optional.of(file),
				mainstage, modifiedAlert);
		});
	}

	private void configureLoadFile() {
		selectedFileName = "fooohfisuf_eyefd";
		task = Mockito.mock(Task.class);
		Mockito.when(file.canRead()).thenReturn(true);
		Mockito.when(file.getPath()).thenReturn("filepath");
		Mockito.when(openSaveManager.open("filepath", progressBar, statusWidget)).thenReturn(task);
		Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
		try {
			Mockito.when(task.get()).thenReturn(true);
		}catch(final InterruptedException | ExecutionException ex) {
			fail(ex.getMessage());
		}
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> assertThat(cmd.hadEffect()).isTrue(),
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> assertThat(cmd.hadEffect()).isTrue(),
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> assertThat(cmd.hadEffect()).isFalse(),
			() -> {
				assertThat(cmd.hadEffect()).isTrue();
				Mockito.verify(ui, Mockito.atLeastOnce()).setModified(false);
				Mockito.verify(ui, Mockito.never()).setModified(true);
			});
	}
}
