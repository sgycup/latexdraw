package net.sf.latexdraw.command;

import io.github.interacto.command.CommandsRegistry;
import io.github.interacto.jfx.test.CommandTest;
import io.github.interacto.jfx.ui.JfxUI;
import io.github.interacto.jfx.ui.OpenSaver;
import io.github.interacto.undo.UndoCollector;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;
import javafx.concurrent.Task;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.util.BadaboomCollector;
import net.sf.latexdraw.util.SystemUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.testfx.framework.junit5.ApplicationExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

/**
 * Test class for the command NewDrawing. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
@ExtendWith(ApplicationExtension.class)
class NewDrawingTest extends CommandTest<NewDrawing> {
	FileChooser fileChooser;
	Optional<File> currentFolder;
	Stage mainstage;
	File file;
	OpenSaver<Label> openSaveManager;
	ProgressBar progressBar;
	Label statusWidget;
	JfxUI ui;
	Alert modifiedAlert;
	String selectedFileName;
	Task<Boolean> task;
	CommandsRegistry cmdReg;
	UndoCollector collector;
	SystemUtils formerUtils;

	@BeforeEach
	void setUp() {
		formerUtils = SystemUtils.getInstance();
		cmdReg = CommandsRegistry.getInstance();
		collector = UndoCollector.getInstance();
		CommandsRegistry.setInstance(Mockito.mock(CommandsRegistry.class));
		UndoCollector.setInstance(Mockito.mock(UndoCollector.class));
	}

	@AfterEach
	void tearDown() {
		CommandsRegistry.setInstance(cmdReg);
		UndoCollector.setInstance(collector);
		SystemUtils.setSingleton(formerUtils);

	}

	@Override
	protected void commonCanDoFixture() {
		final SystemUtils utils = Mockito.mock(SystemUtils.class);
		Mockito.when(utils.getPathTemplatesDirUser()).thenReturn("");
		SystemUtils.setSingleton(utils);
		ui = Mockito.mock(JfxUI.class);
		statusWidget = Mockito.mock(Label.class);
		progressBar = Mockito.mock(ProgressBar.class);
		mainstage = Mockito.mock(Stage.class);
		file = Mockito.mock(File.class);
		modifiedAlert = Mockito.mock(Alert.class);
		openSaveManager = Mockito.mock(OpenSaver.class);
		fileChooser = Mockito.mock(FileChooser.class);
		currentFolder = Optional.empty();

		cmd = new NewDrawing(file, openSaveManager, progressBar, statusWidget, ui, fileChooser, currentFolder, mainstage, modifiedAlert);
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			// not modified ui
			Mockito.when(ui.isModified()).thenReturn(false);
		}, () -> {
			// modified ui, NO
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.NO));
		}, () -> {
			// modified ui, YES
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
			selectedFileName = "fooohfisuf_eyefd";
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenReturn(true);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
		}, () -> {
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
			selectedFileName = "fooohfisuf_eyefd";
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenThrow(InterruptedException.class);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
		}, () -> {
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
			selectedFileName = "fooohfisuf_eyefd";
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenThrow(ExecutionException.class);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
		}, () -> {
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.CANCEL));
		});
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			assertThat(cmd.hadEffect()).isTrue();
			Mockito.verify(ui, Mockito.times(1)).reinit();
			Mockito.verify(CommandsRegistry.getInstance(), Mockito.times(1)).clear();
			Mockito.verify(UndoCollector.getInstance(), Mockito.times(1)).clear();
		}, () -> assertThat(cmd.hadEffect()).isTrue(),
			() -> assertThat(cmd.hadEffect()).isTrue(),
			() -> {
				BadaboomCollector.INSTANCE.clear();
				assertThat(cmd.hadEffect()).isFalse();
			},
			() -> {
				BadaboomCollector.INSTANCE.clear();
				assertThat(cmd.hadEffect()).isFalse();
			},
			() -> assertThat(cmd.hadEffect()).isFalse());
	}
}
