package net.sf.latexdraw.command;

import io.github.interacto.jfx.test.CommandTest;
import io.github.interacto.jfx.ui.JfxUI;
import io.github.interacto.jfx.ui.OpenSaver;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;
import javafx.concurrent.Task;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import net.sf.latexdraw.LatexdrawExtension;
import net.sf.latexdraw.service.PreferencesService;
import net.sf.latexdraw.util.Injector;
import net.sf.latexdraw.util.SystemUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.testfx.framework.junit5.ApplicationExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

/**
 * Test class for the command SaveDrawing. Generated by Interacto test-gen.
 */
@Tag("command")
@ExtendWith(LatexdrawExtension.class)
@ExtendWith(ApplicationExtension.class)
class SaveDrawingTest extends CommandTest<SaveDrawing> {
	Optional<File> currentFolder;
	FileChooser fileChooser;
	Injector injector;
	PreferencesService prefService;
	Stage mainstage;
	File file;
	OpenSaver<Label> openSaveManager;
	ProgressBar progressBar;
	Label statusWidget;
	JfxUI ui;
	Alert modifiedAlert;
	String selectedFileName;
	Task<Boolean> task;
	SystemUtils formerUtils;

	@BeforeEach
	void setUp() {
		formerUtils = SystemUtils.getInstance();
	}

	@AfterEach
	void tearDown() {
		SystemUtils.setSingleton(formerUtils);
	}

	@Override
	protected void commonCanDoFixture() {
		final SystemUtils utils = Mockito.mock(SystemUtils.class);
		Mockito.when(utils.getPathTemplatesDirUser()).thenReturn("");
		SystemUtils.setSingleton(utils);
		ui = Mockito.mock(JfxUI.class);
		statusWidget = Mockito.mock(Label.class);
		progressBar = Mockito.mock(ProgressBar.class);
		mainstage = Mockito.mock(Stage.class);
		file = Mockito.mock(File.class);
		modifiedAlert = Mockito.mock(Alert.class);
		openSaveManager = Mockito.mock(OpenSaver.class);
		fileChooser = Mockito.mock(FileChooser.class);
		currentFolder = Optional.empty();
		injector = Mockito.mock(Injector.class);
		prefService = Mockito.mock(PreferencesService.class);
		Mockito.when(injector.getInstance(PreferencesService.class)).thenReturn(prefService);
		cmd = new SaveDrawing(true, true, currentFolder, fileChooser, injector,
			file, openSaveManager, progressBar, ui, statusWidget, mainstage, modifiedAlert);
	}

	@Override
	protected Stream<Runnable> canDoFixtures() {
		return Stream.of(() -> {
			// ui not modified, save close,
			Mockito.when(ui.isModified()).thenReturn(false);
		}, () -> {
			// ui modified, save close, NO
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.NO));
		}, () -> {
			// ui modified, save close, CANCEL
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.CANCEL));
		}, () -> {
			// ui modified, save close, YES
			Mockito.when(ui.isModified()).thenReturn(true);
			Mockito.when(modifiedAlert.showAndWait()).thenReturn(Optional.of(ButtonType.YES));
			selectedFileName = "fooohfisuf_eyefd";
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenReturn(true);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
		}, () -> {
			// not save on close, file not null
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(file.getPath()).thenReturn("foo.svg");
			Mockito.when(openSaveManager.save("foo.svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenReturn(true);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
			cmd = new SaveDrawing(true, false, currentFolder, fileChooser, injector,
				file, openSaveManager, progressBar, ui, statusWidget, mainstage, modifiedAlert);
		}, () -> {
			// not save on close, file null and no selected file
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(null);
			cmd = new SaveDrawing(true, false, currentFolder, fileChooser, injector,
				null, openSaveManager, progressBar, ui, statusWidget, mainstage, modifiedAlert);
		}, () -> {
			// not save on close, file null but file selected
			Mockito.when(fileChooser.showSaveDialog(Mockito.any())).thenReturn(new File(selectedFileName));
			task = Mockito.mock(Task.class);
			Mockito.when(openSaveManager.save(selectedFileName + ".svg", progressBar, statusWidget)).thenReturn(task);
			try {
				Mockito.when(task.get()).thenReturn(true);
			}catch(final InterruptedException | ExecutionException ex) {
				fail(ex.getMessage());
			}
			cmd = new SaveDrawing(true, false, currentFolder, fileChooser, injector,
				null, openSaveManager, progressBar, ui, statusWidget, mainstage, modifiedAlert);
		});
	}

	@Override
	protected Stream<Runnable> doCheckers() {
		return Stream.of(() -> {
			Mockito.verify(mainstage, Mockito.times(1)).close();
			Mockito.verify(injector, Mockito.times(1)).clear();
			Mockito.verify(prefService, Mockito.times(1)).writePreferences();
		}, () -> {
			Mockito.verify(mainstage, Mockito.times(1)).close();
				Mockito.verify(injector, Mockito.times(1)).clear();
				Mockito.verify(prefService, Mockito.times(1)).writePreferences();
		}, () -> assertThat(cmd.hadEffect()).isFalse(),
			() -> {
			Mockito.verify(openSaveManager, Mockito.times(1)).save(selectedFileName + ".svg", progressBar, statusWidget);
			Mockito.verify(mainstage, Mockito.times(1)).close();
				Mockito.verify(injector, Mockito.times(1)).clear();
				Mockito.verify(prefService, Mockito.times(1)).writePreferences();
		}, () -> Mockito.verify(openSaveManager, Mockito.times(1)).save("foo.svg", progressBar, statusWidget), () -> assertThat(cmd.hadEffect()).isFalse(),
		() -> Mockito.verify(openSaveManager, Mockito.times(1)).save(selectedFileName + ".svg", progressBar, statusWidget));
	}
}
